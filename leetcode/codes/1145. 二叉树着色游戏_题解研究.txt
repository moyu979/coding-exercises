class Solution {
    const long MOD = 1e9 + 7;
public:
    int dieSimulator(int n, vector<int>& rollMax) {
        int m = rollMax.size(), f[n][m][15];
        //剩余0次的情况 全部是1个状态
        for (int j = 0; j < m; ++j)
            for (int k = 0; k < rollMax[j]; ++k)
                f[0][j][k] = 1;
        //剩余1次开始找状态机
        for (int i = 1; i < n; ++i)
            //遍历上一个骰子的值
            for (int last = 0; last < m; ++last)
                //剩下次数
                for (int left = 0; left < rollMax[last]; ++left) {
                    //以上遍历了整个数组
                    long res = 0;
                    //m:6新的骰子
                    for (int j = 0; j < m; ++j)
                        //如果新的骰子和上一个不同，有效是骰出j后，剩下j-1的情况
                        if (j != last) res += f[i - 1][j][rollMax[j] - 1];
                        else if (left) res += f[i - 1][j][left - 1];
                    f[i][last][left] = res % MOD;
                }
        long ans = 0;
        for (int j = 0; j < m; ++j)
            ans += f[n - 1][j][rollMax[j] - 1];
        return ans % MOD;
    }
};
